<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Pixel Cloud</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="style.css">
    <link rel="shortcut icon" href="https://cdn.glitch.com/03bf0f4f-412c-4b00-bdde-f6949c127f34%2Ffavicon.ico?v=1621103400182"/>
<!--     <link rel="shortcut icon" href="/favicon.ico" /> -->
    
     <style>
      body {
        background-color: black;
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
      }
    </style>
	</head>

	<body>
    
    <div id="blocker">
      <div id="instructions">
        <header>
          <h1 style="margin-top:20px; margin-bottom:0;">
            Pixel Cloud
          </h1>
<br />
          <div class="flex-center">
            <nav>
              <ul>
                <li><a href="pixel.html">Pixel</a></li>
                <li><a href="pixel2.html">Pixel2</a></li>
                <li><a href="pixel3.html">Pixel3</a></li>
                <li><a href="pixel4.html">Pixel4</a></li>
              </ul>
            </nav>
          </div>
        </header>
      </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r79/three.min.js"></script>
<!--     <script src="https://threejs.org/examples/js/controls/TrackballControls.js"></script>  -->

<!-- 		<script type="module">

			import * as THREE from '/build/three.module.js';
			import { AsciiEffect } from '/effects/AsciiEffect.js'; 
      import { OBJLoader } from '/loaders/OBJLoader2.js'; 
			//import { TrackballControls } from '/controls/TrackballControls2.js';

			let camera, controls, scene, renderer, effect;

			let sphere, plane;
      
      let object;

			const start = Date.now();

			init();
			animate();

			function init() {

				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.y = 150;
				camera.position.z = 100;

				scene = new THREE.Scene();
				scene.background = new THREE.Color( 0, 0, 0 );

				const pointLight1 = new THREE.PointLight( 0xffffff );
				pointLight1.position.set( 500, 500, 500 );
				scene.add( pointLight1 );

				const pointLight2 = new THREE.PointLight( 0xffffff, 0.25 );
				pointLight2.position.set( - 500, - 500, - 500 );
				scene.add( pointLight2 );
        
        
        //Obj Loader
        function loadModel() {

					object.traverse( function ( child ) {

						if ( child.isMesh ) child.material.map = texture;

					} );

					object.position.y = 0;
          object.scale.set(100, 100, 100);
					scene.add( object );

				}
        
        // Manager
        const manager = new THREE.LoadingManager( loadModel );

				manager.onProgress = function ( item, loaded, total ) {

					console.log( item, loaded, total );

				};
        
        	// texture

				const textureLoader = new THREE.TextureLoader( manager );
				const texture = textureLoader.load( 'https://cdn.glitch.com/3559418b-0a3b-4d6d-8df2-556730e2faf5%2Fsaisset.jpg?v=1617590395599' );

				// model

				function onProgress( xhr ) {

					if ( xhr.lengthComputable ) {

						const percentComplete = xhr.loaded / xhr.total * 100;
						console.log( 'model ' + Math.round( percentComplete, 2 ) + '% downloaded' );

					}

				}

				function onError() {}

				const loader = new OBJLoader( manager );
				loader.load( 'https://cdn.glitch.com/4fa7cf00-160a-46c3-9eac-aac64e7d8222%2Funtitled.obj?v=1619474237156', function ( obj ) {

					object = obj;

				}, onProgress, onError );

				sphere = new THREE.Mesh( new THREE.SphereGeometry( 200, 20, 10 ), new THREE.MeshPhongMaterial( { flatShading: true } ) );
				//scene.add( sphere );

				// Plane

				plane = new THREE.Mesh( new THREE.PlaneGeometry( 400, 400 ), new THREE.MeshBasicMaterial( { color: 0xe0e0e0 } ) );
				plane.position.y = - 200;
				plane.rotation.x = - Math.PI / 2;
				//scene.add( plane );

				renderer = new THREE.WebGLRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );

				//effect = new AsciiEffect( renderer, ' .:-+*=%@#', { invert: true } );
        effect = new AsciiEffect( renderer, ' PIXEL-CLOUD#', { invert: true } );
				effect.setSize( window.innerWidth, window.innerHeight );
				effect.domElement.style.color = 'white';
				effect.domElement.style.backgroundColor = 'grey';

				// Special case: append effect.domElement, instead of renderer.domElement.
				// AsciiEffect creates a custom domElement (a div container) where the ASCII elements are placed.

				document.body.appendChild( effect.domElement );

				//controls = new TrackballControls( camera, effect.domElement );

				//

				window.addEventListener( 'resize', onWindowResize );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );
				effect.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();

			}

			function render() {

				const timer = Date.now() - start;

				sphere.position.y = Math.abs( Math.sin( timer * 0.002 ) ) * 150;
				object.rotation.x = timer * 0.00003;
				object.rotation.z = timer * 0.00002;

				//controls.update();

        //renderer.render( scene, camera );
				effect.render( scene, camera );

			}


		</script> -->
    
<!--     <script src="/loaders/OBJLoader.js"></script> -->

	</body>
</html>